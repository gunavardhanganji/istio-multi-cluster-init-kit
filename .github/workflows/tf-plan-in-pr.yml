name: Apply Terraform on PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    if: github.event.review.state != 'approved'
    steps:
    - uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Authenticate to Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # - name: Terraform Plan
    #   id: plan
    #   working-directory: ./terraform
    #   # working-directory: ${{ inputs.terraform_directory }}
    #   shell: bash
    #   run: |
    #     echo 'plan<<EOF' >> $GITHUB_OUTPUT
    #     terraform plan -out=tfplan >> $GITHUB_OUTPUT
    #     echo 'EOF' >> $GITHUB_OUTPUT

    # - name: Save Artifact
    #   id: save-artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ github.event.pull_request.number }}-tf-plan
    #     path: ./terraform/tfplan

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
    
          // 2. Prepare format of the comment
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
          <details><summary>Show Plan</summary>
  
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
      
    # - name: Comment Plan
    #   id: comment-plan
    #   uses: peter-evans/create-or-update-comment@v3
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     issue-number: ${{ github.event.pull_request.number }}
    #     body: |
    #       Terraform Plan:

    #       ```
    #       ${{ steps.plan.outputs.plan }}
    #       ```

    #       Plan saved to GH artifacts.

  # manual-approval:
  #   runs-on: ubuntu-latest
  #   needs: [terraform-plan]
  #   if: github.event_name == 'pull_request'
  
  #   steps:
  #   - name: Wait for Approval
  #     id: approval
  #     run: echo "::set-output name=approved::true"
  
  #   - name: Check Approval Status
  #     run: |
  #       if [[ "${{ steps.approval.outputs.approved }}" != "true" ]]; then
  #         echo "Approval not granted. Skipping apply."
  #         exit 0
  #       else
  #         echo "Approval granted. Applying changes."
  #       fi

  # terraform-apply:
  #   runs-on: ubuntu-latest
  #   needs: [terraform-plan, manual-approval]

  #   steps:
  #   - name: Terraform Apply
  #     id: apply
  #     working-directory: ./terraform
  #     shell: bash
  #     run: |
  #       echo 'apply<<EOF' >> $GITHUB_OUTPUT
  #       terraform apply -input=false -no-color tfplan >> $GITHUB_OUTPUT
  #       echo 'EOF' >> $GITHUB_OUTPUT

  #   - name: Comment Apply
  #     id: comment-apply
  #     uses: peter-evans/create-or-update-comment@v2
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       issue-number: ${{ github.event.pull_request.number }}
  #       body: |
  #         Terraform Apply:

  #         ```
  #         ${{ steps.apply.outputs.apply }}
  #         ```
